// Automatically generated by MockGen. DO NOT EDIT!
// Source: network.go

package network

import (
	gomock "github.com/golang/mock/gomock"
	v1 "kubevirt.io/api/core/v1"
	v1beta1 "kubevirt.io/api/instancetype/v1beta1"
)

// Mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *_MockControllerRecorder
}

// Recorder for MockController (not exported)
type _MockControllerRecorder struct {
	mock *MockController
}

func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &_MockControllerRecorder{mock}
	return mock
}

func (_m *MockController) EXPECT() *_MockControllerRecorder {
	return _m.recorder
}

func (_m *MockController) ApplyInterfacePreferencesToVMI(vm *v1.VirtualMachine, spec *v1.VirtualMachineInstanceSpec) *v1.VirtualMachineInstanceSpec {
	ret := _m.ctrl.Call(_m, "ApplyInterfacePreferencesToVMI", vm, spec)
	ret0, _ := ret[0].(*v1.VirtualMachineInstanceSpec)
	return ret0
}

func (_mr *_MockControllerRecorder) ApplyInterfacePreferencesToVMI(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ApplyInterfacePreferencesToVMI", arg0, arg1)
}

// Mock of finder interface
type Mockfinder struct {
	ctrl     *gomock.Controller
	recorder *_MockfinderRecorder
}

// Recorder for Mockfinder (not exported)
type _MockfinderRecorder struct {
	mock *Mockfinder
}

func NewMockfinder(ctrl *gomock.Controller) *Mockfinder {
	mock := &Mockfinder{ctrl: ctrl}
	mock.recorder = &_MockfinderRecorder{mock}
	return mock
}

func (_m *Mockfinder) EXPECT() *_MockfinderRecorder {
	return _m.recorder
}

func (_m *Mockfinder) FindPreference(_param0 *v1.VirtualMachine) (*v1beta1.VirtualMachinePreferenceSpec, error) {
	ret := _m.ctrl.Call(_m, "FindPreference", _param0)
	ret0, _ := ret[0].(*v1beta1.VirtualMachinePreferenceSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockfinderRecorder) FindPreference(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindPreference", arg0)
}

// Mock of applier interface
type Mockapplier struct {
	ctrl     *gomock.Controller
	recorder *_MockapplierRecorder
}

// Recorder for Mockapplier (not exported)
type _MockapplierRecorder struct {
	mock *Mockapplier
}

func NewMockapplier(ctrl *gomock.Controller) *Mockapplier {
	mock := &Mockapplier{ctrl: ctrl}
	mock.recorder = &_MockapplierRecorder{mock}
	return mock
}

func (_m *Mockapplier) EXPECT() *_MockapplierRecorder {
	return _m.recorder
}

func (_m *Mockapplier) Apply(_param0 *v1beta1.VirtualMachinePreferenceSpec, _param1 *v1.VirtualMachineInstanceSpec) *v1.VirtualMachineInstanceSpec {
	ret := _m.ctrl.Call(_m, "Apply", _param0, _param1)
	ret0, _ := ret[0].(*v1.VirtualMachineInstanceSpec)
	return ret0
}

func (_mr *_MockapplierRecorder) Apply(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Apply", arg0, arg1)
}
